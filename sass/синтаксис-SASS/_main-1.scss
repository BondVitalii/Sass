// Переменные
// $color: red;
// $main-width: 100px;

// ________________________________________________________

// body {
//   background-color: $color;
//   width: $main-width;
// }

// ________________________________________________________

// ----- Вложенность -----

// ----- код html -----
// <section class="section">
//   <h2 class="title"></h2>
//   <p class="text"></p>
// </section>
// ----------

// .section {
//   color: red($color: #000000);
// }
// .section .title {
//   color: green;
// }
// .section .text {
//   color: teal;
// }

// // Вложенность (селектор потомка)-----

// .section {
//   color: red;
//   .title {
//     color: green;
//   }
//   .text {
//     color: teal;
//   }
// }

// ________________________________________________________

// ----- Вложенность & аперсант. -----

// & аперсант - сшивает силектор потомка с названием родительского силектора.

// ----- код html -----
// <section class="section">
//   <h2 class="section-title"></h2>
//   <p class="section-text"></p>
// </section>
// ----------

// .section {
//   // & аперсант говорит - возьми родительское имя класса и к нему приставь селектор title.
//   color: red;

//   &-title {
//     color: teal;

//     &--red {
//       color: red;
//     }
//   }

//   &-text {
//     color: green;
//   }
// }

// _______________________________________________________

// Так писать ненужно, потому что читать сложно! Большая вложенность это не хорошо!

// ----- код html -----
// <section class="section">
//   <h2 class="section__title section__title--red"></h2>
//   <p class="section__text"></p>
// </section>
// ----------

// .section {
//   color: red;

//   &__title {
//     color: red;

//     &--red {
//       color: green;
//     }
//   }

//   &__text {
//     color: black;
//   }
// }

//  ________________________________________________________

// Как писать правильно!
// Модификаторы пишем отдельно для читабельности, а состояния элементов к примеру: :hover, :focus и т.п., внутри модификатора.

// ----- код html -----
// <section class="section">
//   <h2 class="section__title section__title--red"></h2>
//   <p class="section__text"></p>
// </section>
// ----------

// .section {
//   color: red;

//   &:hover {
//     color: blue;
//   }
// }

// ----------

// .section__title {
//   color: red;

//   &:hover {
//     color: green;
//   }

//   &--red {
//     color: red;
//   }
// }

// ----------

// .section__text {
//   color: green;

//   &:hover {
//     color: red;
//   }
// }

//  ________________________________________________________

// Вложенность с оператлром конкатенации: '& селектор' и 'селектор &' на примере стилей при ховере по предку.

// ----- код html -----
// <div class="box">
//   <button class="button">qweqwe</button>
// </div>
// ----------

// .box {
//   background-color: red;
// }

// .button {
//   background-color: teal;

//   &:hover,
//   &:focus {
//     color: black;
//   }

//   .box:hover & {         // Когда этот box:hover, для этого button примени эти стили.
//     background-color: orange;
//   }
// }

//  ________________________________________________________

// ----- Выбираем соседа  -----

// ----- код html -----
// <p></p>
// <p></p>
// ----------

// p {
//   & + & {
//     background-color: red;
//   }
// }

//  ________________________________________________________

// ----- Прописываем код в разных файлах. -----

// ----- код html -----
// <div class="page-header"></div>
// <div class="logo"></div>
// ----------

// В файле _variables.scss создаем переменную

// $bg-color: red;

// -----

// В файле _page-header.scss пишем стили для page-header

// .page-header {
//   background-color: $bg-color;
// }

// -----

// В файле _page-header.scss пишем стили для logo

// .logo {
//   background-color: red;

//   &:hover {
//     background-color: orange;
//   }
// }

//  ________________________________________________________

// ----- код html -----
// <ul class="list">
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
//   <li class="list-item"></li>
// </ul>
// ----------

// .list-item {
//   background-color: red;

//   &:nth-child(3) {
//     background-color: blue;
//   }
// }

//  ________________________________________________________

// ----- Директива @extend -----

// ----- код html -----

// запись не в таком формате

// <p class="notification notification-error"></p>
// <p class="notification notification-success"></p>

// а в таком формате без лишнего класса базового.

// <p class="notification-error"></p>
// <p class="notification-success"></p>
// ----------

// .notification {
//   background-color: #ccc;

//   font-size: 20px;
//   padding: 20px;
// }

// .notification-error {
//   @extend .notification;
//   background-color: red;
// }

// .notification-success {
//   @extend .notification;
//   background-color: green;
// }

//  ________________________________________________________

// ----- % Плейсхолдеры -----

// Это называется шаблон. Когда у нас есть общий набор свойств который нужно применить к разным селекторам, мы ставим шаблон.

// ----- код html -----
// <p class="notification-error"></p>
// <p class="notification-success"></p>
// ----------

// %notification {    //   Это мы записываем в файл с утилитами папка utils файл  _placeholders
//   background-color: #ccc;

//   font-size: 20px;
//   padding: 20px;
// }

// %list {            //   Это мы записываем в файл с утилитами папка utils файл  _placeholders
//   padding: 0;
//   margin: 0;
//   list-style: none;
// }

// ----------------------

//  А в файлах используем єтот шаблон

// .notification-error {
//   @extend %notification;
//   background-color: red;
// }

// .notification-success {
//   @extend %notification;
//   background-color: green;
// }

// .features {
//   @extend %list;
// }

//  ________________________________________________________

// ----- Директива @mixin -----

// Синтаксис такой.
// Миксин обьявляется с помощью дерективы @mixin и его имени. Далее могут идти необязательные параметры в круглых скобках (сами скобки обязательны), ф в фигурных - набор свойств и значений.

// ----- Конспект -----

// @mixin имя(параметры) {
// Свойства
// }
// -----
// Создадим миксин для задания только верхней и нижней рамки элемента, и сделаем цвет рамки настраеваемым значением.

// @mixin bordered($color) {
//   border-top: 1px solid $color;
//   border-bottom: 1px solid $color;
// }
// -----

// Добавить стили миксина к селектору можно при помощи директивы @include, после которой вызываем миксин и передаем значения для настраиваемых свойств.

@mixin bordered($color) {
  border-top: 1px solid $color;
  border-bottom: 1px solid $color;
}
.section {
  @include bordered(tomato);
  padding: 20px;
}
.header {
  @include bordered(green);
  min-height: 80px;
}
// После компиляции будут только правила для селекторов .section и .header с добавленным кодом из миксина, кода обьявления самого миксина не будет.

// -----

// ----- Репета -----

@mixin bordered() {
  border: 1px solid red;
}
